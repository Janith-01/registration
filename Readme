        Student Course Registration System
Overview
This is a Spring Boot application implementing a Student Course Registration System as per the ZDATA Innovations Backend Developer Intern Assessment.
It provides RESTful APIs for managing students, courses, and course registrations using in-memory storage.

Prerequisites
Java 17

Maven 3.8+

IDE (e.g., IntelliJ IDEA)

Setup and Running Instructions

Clone the repository:
git clone <your-repo-url>
cd srs
Build the project:

mvn clean install
Run the application:

mvn spring-boot:run
Access the application at http://localhost:8080.

Swagger UI is available at http://localhost:8080/swagger-ui.html.

Sample HTTP Requests

Register a Student
POST http://localhost:8080/students \
"Content-Type: application/json" \
'{"name":"John Doe","email":"john.doe@example.com"}'

Add a Course
POST http://localhost:8080/courses \
"Content-Type: application/json" \
'{"code":"CS101","title":"Introduction to Programming","instructor":"Dr. Smith"}'

Register a Student for a Course
POST http://localhost:8080/students/{studentId}/register/{courseId}

Drop a Course
DELETE http://localhost:8080/students/{studentId}/drop/{courseId}

List Registered Courses
GET http://localhost:8080/students/{studentId}/courses

List All Courses
GET http://localhost:8080/courses

Assumptions
UUIDs are used for IDs to ensure uniqueness.

In-memory storage uses HashMaps for students, courses, and registrations.

No pagination is implemented for GET /courses (bonus feature not included due to time constraints).

Basic unit tests cover core functionality; comprehensive testing can be extended.

Code Structure
config/: Swagger configuration for API documentation.

controller/: REST controllers for handling HTTP requests.

dto/: Data Transfer Objects for request/response payloads.

model/: Core data models (Student, Course, Registration).

service/: Business logic and in-memory storage.

exception/: Custom exceptions for error handling.

test/: Unit tests using JUnit and Mockito.

Test Coverage
Basic unit tests cover course addition and student registration.

Tests verify business constraints (e.g., unique email, unique course code, duplicate registration prevention).

Further test coverage can be added for edge cases.

Contact
For clarifications, reach out to the ZDATA Innovation team.
